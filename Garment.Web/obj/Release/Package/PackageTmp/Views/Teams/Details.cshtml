@model Team
@{
    ViewBag.Title = Model.Name;
    var d = DateTime.Now;
    var today = d.ToString("dd/MM/yyyy");
    var startDate = new DateTime(d.Year, d.Month, 1);
    int year = DateTime.Now.Year;
    DateTimeFormatInfo dfi = DateTimeFormatInfo.CurrentInfo;
    Calendar cal = dfi.Calendar;
    int num = cal.GetWeekOfYear(new DateTime(2016, 1, 1), dfi.CalendarWeekRule, dfi.FirstDayOfWeek);
}
<div ng-app="garmentApp" class="main-box" ng-controller="teamController">
    <div class="main-box-header clearfix">
        <div class="col-md-4">
            <h1>@Model.Name</h1>
        </div>
        <div class="form-group col-md-3 pull-right">
            <input type="text" class="form-control" name="daterange" id="daterange" />
        </div>
        <div class="form-group pull-right">
            <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle selectparent" data-default="Tuần" data-toggle="dropdown" aria-expanded="false">
                    Tuần <span class="caret"></span>
                </button>
                <div class="dropdown-menu" role="menu" id="week" style="height:150px; overflow: auto">
                    <div id="wrapperDivWeek" class="dropdownchild">

                        @for (int i = 0; i < 10; i++)
                        {
                            //--Tuần tính từ T7 tuần trước đển T6 tuần hiện tại--//
                            var currDay = d.DayOfWeek;
                            DateTime prevSat = DateTime.Now;
                            //cn
                            if (currDay == 0)
                            {
                                prevSat = d.AddDays(-6);
                            }
                            else
                            {
                                int delta = DayOfWeek.Monday - d.DayOfWeek;
                                prevSat = d.AddDays(delta);
                            }
                            var beginWeek = prevSat.ToString("dd/MM/yyyy");
                            var endWeek = prevSat.AddDays(6).ToString("dd/MM/yyyy");
                            d = prevSat.AddDays(-1);
                            int numweek = 0;
                            if (DateTime.Now.Year == prevSat.Year)
                            {
                                numweek = cal.GetWeekOfYear(prevSat.AddDays(-1), dfi.CalendarWeekRule, dfi.FirstDayOfWeek);
                            }
                            else
                            {
                                numweek = cal.GetWeekOfYear(prevSat, dfi.CalendarWeekRule, dfi.FirstDayOfWeek);
                            }

                            <p data-date="@d.AddDays(+1)"><a href="#" class="selectpicker" data-display="Tuần @numweek / @prevSat.Year" data-start="@beginWeek" data-end="@endWeek" data-my="@prevSat.AddDays(6)" range-select>Tuần từ @beginWeek - @endWeek ( @numweek )</a></p>
                        }

                    </div>
                </div>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle selectparent" id="initMonth" data-default="Tháng" data-toggle="dropdown" aria-expanded="false">
                    Tháng <span class="caret"></span>
                </button>
                <div class="dropdown-menu" role="menu" id="month" style="height:150px; overflow: auto">
                    <div id="wrapperDivMonth" class="dropdownchild">
                        @{
                            d = DateTime.Now;
                        }
                        @for (int i = 0; i < 10; i++)
                        {
                            var month = d.AddMonths(i * -1);
                            var dateTemp = new DateTime(month.Year, month.Month, 1);
                            var firstDayOfMonth = dateTemp.ToString("dd/MM/yyyy");
                            var lastDayOfMonth = dateTemp.AddMonths(1).AddDays(-1).ToString("dd/MM/yyyy");
                            <p data-date="@dateTemp.AddMonths(-1)"><a href="#" class="selectpicker" data-display="@month.Month / @month.Year" data-start="@firstDayOfMonth" data-end="@lastDayOfMonth">@month.Month / @month.Year</a></p>
                        }
                    </div>

                </div>
            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle selectparent" data-default="Quý" data-toggle="dropdown" aria-expanded="false">
                    Quý <span class="caret"></span>
                </button>
                <div class="dropdown-menu" role="menu" id="quarter" style="height:100px; overflow: auto">
                    <div id="wrapperDivQuarter" class="dropdownchild">
                        @{
                            DateTime dateQuarter = DateTime.Now;
//DateTime d = (d.Month - 1) / 3 + 1;
                        }
                        @for (int i = 0; i < 4; i++)
                        {
                            int quarter = (dateQuarter.Month - 1) / 3 + 1;
                            Tuple<DateTime, DateTime> date = Extensions.SetLastQuarterDates(quarter, dateQuarter.Year);
                            <p data-date="@date.Item1.ToString("dd/MM/yyyy")"><a href="#" class="selectpicker" data-display="Quý @quarter / @dateQuarter.Year" data-start="@date.Item1.ToString("dd/MM/yyyy")" data-end="@date.Item2.ToString("dd/MM/yyyy")">Quý @quarter / @dateQuarter.Year</a></p>
                            dateQuarter = dateQuarter.AddMonths(-3);
                        }
                    </div>

                </div>

            </div>

            <div class="btn-group">
                <button type="button" class="btn btn-primary dropdown-toggle selectparent" data-default="Năm" data-toggle="dropdown" aria-expanded="false">
                    Năm <span class="caret"></span>
                </button>
                <div class="dropdown-menu" role="menu" id="year" style="height:150px; overflow: auto">
                    <div id="wrapperDivYear" class="dropdownchild">
                        @{
                            d = DateTime.Now;
                        }
                        @for (int i = 0; i < 10; i++)
                        {
                            var yr = d.AddYears(i * -1);
                            var dateTemp = new DateTime(yr.Year, 1, 1);
                            var firstDayOfYear = dateTemp.ToString("dd/MM/yyyy");
                            var lastDayOfYear = dateTemp.AddYears(1).AddDays(-1).ToString("dd/MM/yyyy");
                            <p data-date="@firstDayOfYear"><a href="#" class="selectpicker" data-display="@yr.Year" data-start="@firstDayOfYear" data-end="@lastDayOfYear">@yr.Year</a></p>
                        }
                    </div>
                </div>
            </div>
        </div>

        
    </div>
    <div class="main-box-body clearfix">
        <div class="tabs-wrapper">
            <ul class="nav nav-tabs">
                <li class="active">
                    <a href="#bieu-do-sx" data-toggle="tab">Biểu đồ sản xuất</a>
                </li>
                <li><a href="#bieu-do-loi" data-toggle="tab" class="btn-error-chart">Biểu đồ lỗi</a></li>
            </ul>
            <div class="tab-content tab-content-body">
                <div class="tab-pane active" id="bieu-do-sx">
                    <div class="row">
                        <div id="chart" class="col-md-9"></div>
                        <div class="col-md-3">
                            <div id="fixed-tooltip">
                                <h4 class="title"></h4>
                                <p class="content"></p>
                                <p class="buttons"></p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="tab-pane" id="bieu-do-loi">
                    <div class="row">
                        <div id="error-chart"></div>
                    </div>
                    <div class="row table-responsive" style="margin-left: 150px" id="table-error-wrapper">
                        <table class="table table-bordered" id="table-error">
                        <colgroup>
                            <col />
                            <col ng-class="{'gray-bg': date.weekday ==  'CN'}" ng-repeat="date in dates track by $index" />
                        </colgroup>
                        <thead>
                            <tr>
                                <th style="border-top:none; border-left: none;border-bottom: none"></th>
                                <th ng-repeat="month in months" colspan="{{month.value}}" class="text-center">Tháng {{month.month}}/{{month.year}}</th>

                            </tr>
                            <tr>
                                <th style="border-top:none; border-left: none; border-bottom: none"></th>
                                <th ng-repeat="date in dates track by $index" class="text-center">{{date.date}}<br />{{date.weekday}}</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="error in errordata" on-finish-render="scrollLeft">
                                <td>{{error.name}}</td>
                                <td ng-repeat="value in error.cells track by $index" ng-style="value>0 && {'background-color':error.color}" class="text-center"><b class="txt-white">{{value > 0 ? value : "&nbsp;"}}</b></td>
                            </tr>
                        </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles{

    <link href="~/Content/daterangepicker.css" rel="stylesheet" />
    <style>
        .table > thead > tr > th:first-child
        {
            position: absolute;
            display: inline-block;
            /*background-color:red;*/
            /*height:100%;*/
            width: 150px;
            margin-left: -150px;
        }
        .table > tbody > tr > td:first-child
        {
            position: absolute;
            display: inline-block;
            /*background-color:red;*/
            /*height:100%;*/
            width: 150px;
            margin-left: -150px;

        }
        /*.table > thead > tr > th:nth-child(2)
        {
            margin-left: 100px;
        }
        .table > tbody > tr > td:nth-child(2)
        {
            margin-left:100px !important;

        }*/
    </style>
}
@section Scripts
{
    <script src="~/Scripts/moment.min.js"></script>
    <script src="~/Scripts/daterangepicker.js"></script>
    @*<script src="~/Scripts/highcharts/highcharts.js"></script>*@
    <script src="~/Scripts/highcharts/highstock.js"></script>
    <script src="~/Scripts/angular.min.js"></script>
    <script>
    var chartOptions = {
        chart: { type: 'spline', animation: false },
        title: { text: 'Biểu đồ thống kê sản xuất' },
        tooltip:
        {
            valueDecimals: 2,
            formatter: function () {

                var s = 'Ngày ' + Highcharts.dateFormat('%d/%m/%Y', this.x) + '<br/><span style="font-weight:bold; color:' + this.series.color + '">' + this.series.name + '</span>: ' + this.point.y;
                return s;
            }
        },
        xAxis:
       {
           type: 'datetime',
           dateTimeLabelFormats:
           {
               millisecond: '%H:%M:%S.%L',
               second: '%H:%M:%S',
               minute: '%H:%M',
               hour: '%H:%M',
               day: '%e/%b',
               week: '%e/%b',
               month: '%b/%y',
               year: '%Y'
           }
       },
        yAxis: {
            title: {
                text: 'Số lượng'
            }

        },
        plotOptions:
        {
            series:
            {
                point:
                {
                    events:
                    {
                        click: function (e) {
                            console.log("click", this);
                            var selectedDate = Highcharts.dateFormat('%d/%m/%Y', this.x);
                            var teamid = this.series.options.id;
                            var $fixedTooltip = $("#fixed-tooltip");
                            var link = '#';

                            $fixedTooltip.show();
                            $fixedTooltip.find(".title").html(this.series.name + " - " + selectedDate);
                            $fixedTooltip.find(".content").html('Sản xuất: ' + this.y);
                            $fixedTooltip.find(".buttons").html('<a href="' + link + '" class="btn btn-default">Xem chi tiết</a>');
                        }
                    }
                }
            }
        },

    };
    var scrollStatus = null;
    var errorChartOptions = {
        chart: {
            type: 'column'
        },
        title: {
            text: 'Biểu đồ lỗi'
        },
        xAxis:
        {
            type: 'datetime',
            dateTimeLabelFormats:
            {
                millisecond: '%H:%M:%S.%L',
                second: '%H:%M:%S',
                minute: '%H:%M',
                hour: '%H:%M',
                day: '%e/%m',
                week: '%e/%b',
                month: '%m/%y',
                year: '%Y'
            },
            range: 5184000000,
            events: {
                setExtremes: function (e)
                {
                    if (scrollStatus == null)
                        scrollStatus = 2;
                    if (scrollStatus == 2) {
                        var percent = (e.min - e.target.dataMin) * 100 / (e.target.dataMax - e.target.dataMin);
                        $("#table-error-wrapper").scrollLeft($("#table-error").width() * percent / 100);
                    }
                }
            }
        },
        yAxis: {
            min: 0,
            title: {
                text: 'Số lỗi'
            },
            stackLabels: {
                enabled: true,
                style: {
                    fontWeight: 'bold',
                    color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                }
            }
        },
        scrollbar: {
            enabled: true
        },

        legend: {
            align: 'right',
            x: -30,
            verticalAlign: 'top',
            y: 25,
            floating: true,
            backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
            borderColor: '#CCC',
            borderWidth: 1,
            shadow: false
        },
        //tooltip: {
        //    headerFormat: '<b>{point.x}</b><br/>',
        //    pointFormat: '{series.name}: {point.y}<br/>Tổng: {point.stackTotal}'
        //},
        tooltip: {
            shared: true,
            formatter: function () {
                var points = this.points;
                var pointsLength = points.length;
                
                var tooltipMarkup = pointsLength ? '<span style="font-size: 10px">' + Highcharts.dateFormat('%d/%m/%Y', points[0].key) + '</span><br/>' : '';
                var index;
                
                for (index = 0; index < pointsLength; index += 1)
                {
                    tooltipMarkup += '<span style="color:' + points[index].series.color + '">\u25CF</span> ' + points[index].series.name + ': <b>' + points[index].y  + '</b><br/>';
                }

                return tooltipMarkup;
            }
        },
        plotOptions: {
            series:
            {
                //pointWidth: 60,
                pointPadding: 0,
                groupPadding: 0.01
            },
            column: {
                stacking: 'normal',
                dataLabels: {
                    enabled: true,
                    color: (Highcharts.theme && Highcharts.theme.dataLabelsColor) || 'white',
                    style: {
                        textShadow: '0 0 3px black'
                    }
                }
            }
        }
    };

    var weekdayMap = ["CN", "T2", "T3", "T4", "T5", "T6", "T7"];
    var app = angular.module("garmentApp", []);
    app.controller("teamController", function ($scope, $http) {
        var today = moment(new Date());
        var fromDate = moment(new Date(today.year(), today.month(), 1));
        $scope.from = fromDate.format('DD/MM/YYYY');
        var toDate = fromDate.clone().add(1, 'months').add(-1, 'days');
        $scope.to = toDate.format('DD/MM/YYYY');

        //var errorChart;
        var pickerRange = $('#daterange').daterangepicker({
            locale: {
                format: 'DD/MM/YYYY'
            },
            startDate: $scope.from,
            endDate: $scope.to,
            opens: 'left',
        });
        
        $('.dropdownchild').on('click', '.selectpicker', function (e) {
            e.preventDefault();
            var selectpicker = this;
            $scope.$apply(function () {
                $scope.from = $(selectpicker).data('start');
                $scope.to = $(selectpicker).data('end');

                //fromDate = $('#daterange').data('daterangepicker').startDate;
                //$scope.from = fromDate.format('DD/MM/YYYY');
                //toDate = $('#daterange').data('daterangepicker').endDate;
                //$scope.to = toDate.format('DD/MM/YYYY');
            });

            $('#daterange').data('daterangepicker').setStartDate($scope.from);
            $('#daterange').data('daterangepicker').setEndDate($scope.to);
            fromDate = $('#daterange').data('daterangepicker').startDate;
            toDate = $('#daterange').data('daterangepicker').endDate;

            var title = $(this).data('display');

            $('.selectparent').each(function () {
                $(this).empty();
                $(this).html($(this).data('default') + ' <span class="caret"></span>');
                $(this).removeClass('active');
            });
            var button = $(this).parent().parent().parent().parent().children('button');
            button.empty();
            button.html(title + ' <span class="caret"></span>');
            button.addClass('active');
            //$("#myModal").modal('show');
            drawTeamChart();
            drawErrorChart();
        });
        $('#daterange').on("apply.daterangepicker", function (ev, picker) {
            fromDate = $('#daterange').data('daterangepicker').startDate;
            $scope.from = fromDate.format('DD/MM/YYYY');
            toDate =  $('#daterange').data('daterangepicker').endDate;
            $scope.to = toDate.format('DD/MM/YYYY');
            $('.selectparent').each(function () {
                $(this).empty();
                $(this).html($(this).data('default') + ' <span class="caret"></span>');
                $(this).removeClass('active');
            });
            drawTeamChart();
            drawErrorChart();

        });
        $('.btn-error-chart').on('shown.bs.tab', function (e) {
            window.dispatchEvent(new Event('resize'));
        });

        function drawTeamChart() {

            $.getJSON("/api/Analytics/SingleTeamChart?from=" + $scope.from + "&to=" + $scope.to + "&id=@Model.Id", function (data) {
                chartOptions.series = data;
                $("#chart").highcharts(chartOptions);
            });
        }
        function drawErrorChart() {
            $http.jsonp("/api/Analytics/ReasonChart?from=" + $scope.from + "&to=" + $scope.to + "&id=@Model.Id&callback=JSON_CALLBACK").success(function (data) {
                $scope.dates = [];
                $scope.months = [];
                for (var date = fromDate; date <= toDate; date.add(1, 'days')) {
                    var month = date.month() + 1; //month is based on zero
                    var year = date.year();
                    var monthGroup = $scope.months.find(function (monthGroup) {
                        return monthGroup.month == month && monthGroup.year == year;

                    });
                    if (monthGroup == null) {
                        monthGroup = {
                            month: month,
                            year: year,
                            value: 1,
                        };
                        $scope.months.push(monthGroup);
                    }
                    else
                        monthGroup.value += 1;

                    $scope.dates.push({ date: date.date(), weekday: weekdayMap[date.day()] });
                }
                $scope.errordata = data;
                errorChartOptions.series = data;
                $("#error-chart").highcharts(errorChartOptions);
            })
            .error(function (data, status, headers, config) {
                console.log(data, status, headers, config);
            });
        };

        $scope.$on('scrollLeft', function (ngRepeatFinishedEvent) {
            $("#table-error-wrapper").scrollLeft($("#table-error").width());
        });
        $("#table-error-wrapper").scroll(function (evtObj)
        {
            console.log(evtObj);
            if (scrollStatus == null)
                scrollStatus = 1;
            if (scrollStatus == 1) {
                var errorChart = $("#error-chart").highcharts();
                var minC = errorChart.xAxis[0].dataMin;
                var maxC = errorChart.xAxis[0].dataMax;
                var percent = $("#table-error-wrapper").scrollLeft() * 100 / $("#table-error").width();
                var min = percent * (maxC - minC) / 100 + minC;
                var max = min + 2592000000;
                errorChart.xAxis[0].setExtremes(min, max);
            }
            scrollStatus = null;
        })
        drawTeamChart();
        drawErrorChart();
    });
    app.directive('onFinishRender', function ($timeout) {
        return {
            restrict: 'A',
            link: function (scope, element, attr) {
                if (scope.$last === true) {
                    $timeout(function () {
                        scope.$emit(attr.onFinishRender);
                    });
                }
            }
        }
    });
    </script>
}

